;*** Generated by TRANSLATE, verify before re-including (Debug:N,Optimize:N,DiffEnd:N,Rdb:N) ***
/**************************************************************************************************
    PROGRAM TITLE:  Pregnancy History (wh_psg_pregnancy_hist)
    OBJECT NAME:    wh_psg_preg_hist_nonodat_noblk
    SOURCE FILE:    wh_psg_preg_hist_nonodat_noblk.prg
    PURPOSE:        This Smart Template pull back pregnancy History.
 
    TABLES READ:
    TABLES UPDATED: NONE
 
    SPECIAL NOTES:
        Translated from wh_psg_pregnancy_hist
        This was translated for a project, I've done my best to refactor the object, but
        it's probably still a bit gross.  Sorry about that.
***************************************************************************************************
                          MODIFICATION CONTROL LOG
***************************************************************************************************
 MOD DATE       ANALYST     MCGA          COMMENT
 --- ---------- ----------- ------------- ---------------------------------------------------------
 001 06/03/2020 mmm174      221985        Initial after translate removing no data found message
 002 10/17/2023 mmm174      234863        Removing -- messages from places that contain it
 
***************************************************************************************************
*********************** END OF ALL MODCONTROL BLOCKS **********************************************/
 
drop program wh_psg_preg_hist_nonodat_noblk:dba go
create program wh_psg_preg_hist_nonodat_noblk:dba
    if (not (validate (rhead ,0 ) ) )
        set rhead                = "{\rtf1\ansi \deff0{\fonttbl{\f0\fswiss arial;}}"
        set rhead_colors1        = "{\colortbl;\red0\green0\blue0;\red255\green255\blue255;"
        set rhead_colors2        = "\red99\green99\blue99;\red22\green107\blue178;"
        set rhead_colors3        = "\red0\green0\blue255;\red123\green193\blue67;\red255\green0\blue0;}"
        set reol                 = "\par "
        set rtab                 = "\tab "
        set wr                   = "\plain \f0 \fs16 \cb2 "
        set wr11                 = "\plain \f0 \fs11 \cb2 "
        set wr18                 = "\plain \f0 \fs18 \cb2 "
        set wr20                 = "\plain \f0 \fs20 \cb2 "
        set wu                   = "\plain \f0 \fs16 \ul \cb2 "
        set wb                   = "\plain \f0 \fs16 \b \cb2 "
        set wbu                  = "\plain \f0 \fs16 \b \ul \cb2 "
        set wi                   = "\plain \f0 \fs16 \i \cb2 "
        set ws                   = "\plain \f0 \fs16 \strike \cb2"
        set wb2                  = "\plain \f0 \fs18 \b \cb2 "
        set wb18                 = "\plain \f0 \fs18 \b \cb2 "
        set wb20                 = "\plain \f0 \fs20 \b \cb2 "
        set rsechead             = "\plain \f0 \fs28 \b \ul \cb2 "
        set rsubsechead          = "\plain \f0 \fs22 \b \cb2 "
        set rsecline             = "\plain \f0 \fs20 \b \cb2 "
        set hi                   = "\pard\fi-2340\li2340 "
        set rtfeof               = "}"
        set wbuf26               = "\plain \f0 \fs26 \b \ul \cb2 "
        set wbuf30               = "\plain \f0 \fs30 \b \ul \cb2 "
        set rpard                = "\pard "
        set rtitle               = "\plain \f0 \fs36 \b \cb2 "
        set rpatname             = "\plain \f0 \fs38 \b \cb2 "
        set rtabstop1            = "\tx300"
        set rtabstopnd           = "\tx400"
        set wsd                  = "\plain \f0 \fs13 \cb2 "
        set wsb                  = "\plain \f0 \fs13 \b \cb2 "
        set wrs                  = "\plain \f0 \fs14 \cb2 "
        set wbs                  = "\plain \f0 \fs14 \b \cb2 "
        declare snot_documented  = vc with public ,constant ("--" )
        set color0               = "\cf0 "
        set colorgrey            = "\cf3 "
        set colornavy            = "\cf4 "
        set colorblue            = "\cf5 "
        set colorgreen           = "\cf6 "
        set colorred             = "\cf7 "
        set row_start            = "\trowd"
        set row_end              = "\row"
        set cell_start           = "\intbl "
        set cell_end             = "\cell"
        set cell_text_center     = "\qc "
        set cell_text_left       = "\ql "
        set cell_border_top      = "\clbrdrt\brdrt\brdrw1"
        set cell_border_left     = "\clbrdrl\brdrl\brdrw1"
        set cell_border_bottom   = "\clbrdrb\brdrb\brdrw1"
        set cell_border_right    = "\clbrdrr\brdrr\brdrw1"
        set cell_border_top_left = "\clbrdrt\brdrt\brdrw1\clbrdrl\brdrl\brdrw1"
        set block_start          = "{"
        set block_end            = "}"
    endif
    if ((validate (i18nuar_def ,999 ) = 999 ) )
         call echo ("Declaring i18nuar_def" )
 
         declare i18nuar_def = i2 with persist
         set i18nuar_def = 1
 
         declare uar_i18nlocalizationinit ((p1 = i4 ) ,(p2 = vc ) ,(p3 = vc ) ,(p4 = f8 ) ) = i4 with persist
         declare uar_i18ngetmessage ((p1 = i4 ) ,(p2 = vc ) ,(p3 = vc ) ) = vc with persist
         declare uar_i18nbuildmessage () = vc with persist
         declare uar_i18ngethijridate ((imonth = i2 (val ) )
                                      ,(iday = i2 (val ) )
                                      ,(iyear = i2 (val ) )
                                      ,(sdateformattype = vc (ref ) ) ) = c50
                                  with image_axp = "shri18nuar"
                                     , image_aix = "libi18n_locale.a(libi18n_locale.o)"
                                     , uar = "uar_i18ngethijridate"
                                     , persist
         declare uar_i18nbuildfullformatname ((sfirst = vc (ref ) )
                                             ,(slast = vc (ref ) )
                                             ,(smiddle = vc (ref ) )
                                             ,(sdegree = vc (ref ) )
                                             ,(stitle = vc (ref ) )
                                             ,(sprefix = vc (ref ) )
                                             ,(ssuffix = vc (ref ) )
                                             ,(sinitials = vc (ref ) )
                                             ,(soriginal = vc (ref ) ) ) = c250
                                         with image_axp = "shri18nuar"
                                            , image_aix = "libi18n_locale.a(libi18n_locale.o)"
                                            , uar = "i18nbuildfullformatname"
                                            , persist
         declare uar_i18ngetarabictime ((ctime = vc (ref ) ) ) = c20
                                   with image_axp = "shri18nuar"
                                      , image_aix = "libi18n_locale.a(libi18n_locale.o)"
                                      , uar = "i18n_getarabictime" ,persist
    endif
    if (not (validate (i18nhandle ) ) )
        declare i18nhandle = i4 with protect ,noconstant (0 )
    endif
 
    set stat = uar_i18nlocalizationinit (i18nhandle ,curprog ,"" ,curcclrev )
 
    declare stand_alone_ind = i4 with protect ,noconstant (0 )
    if (not (validate (request->person[1 ].pregnancy_list ) ) )
        set stand_alone_ind = 1
    endif
 
    declare whorgsecpref        = i2 with protect ,noconstant (0 )
    declare prsnl_override_flag = i2 with protect ,noconstant (0 )
    declare preg_org_sec_ind    = i4 with public  ,noconstant (0 )
    declare os_idx              = i4 with          noconstant (0 )
 
    if ((validate (antepartum_run_ind ) = 0 ) )
        declare antepartum_run_ind = i4 with public ,noconstant (0 )
    endif
 
    if (not (validate (whsecuritydisclaim ) ) )
        declare whsecuritydisclaim = vc with public
                                           , constant(uar_i18ngetmessage(i18nhandle, "cap99",
                                                      "(Report contains only data from encounters at associated organizations)"))
    endif
 
    if (not (validate (preg_sec_orgs ) ) )
        free record preg_sec_orgs
        record preg_sec_orgs (
            1 qual [* ]
            2 org_id = f8
            2 confid_level = i4
        )
    endif
 
    declare getpersonneloverride ((person_id = f8 (val ) ) ,(prsnl_id = f8 (val ) ) ) = i2   with protect
    declare getpreferences ()                                                         = i2   with protect
    declare getorgsecurity ()                                                         = null with protect
    declare loadorganizationsecuritylist ()                                           = null
 
    if ((validate (honor_org_security_flag ) = 0 ) )
        declare honor_org_security_flag = i2 with public ,noconstant (0 )
        set whorgsecpref = getpreferences (null )
        call getorgsecurity (null )
        set prsnl_override_flag = getpersonneloverride (request->person[1 ].person_id ,reqinfo->updt_id )
        if ((prsnl_override_flag = 0 ) )
            if ((preg_org_sec_ind = 1 ) and (whorgsecpref = 1 ) )
                set honor_org_security_flag = 1
            endif
        endif
    endif
 
    subroutine  getpersonneloverride (person_id ,prsnl_id )
        call echo (build ("person_id=" ,person_id ) )
        call echo (build ("prsnl_id=" ,prsnl_id ) )
        declare override_ind = i2 with protect ,noconstant (0 )
        if ((((person_id <= 0.0 ) ) or ((prsnl_id <= 0.0 ) )) )
            return (0 )
        endif
 
        select into "nl:"
          from (person_prsnl_reltn ppr ),
               (code_value_extension cve )
          plan (ppr
           where (ppr.prsnl_person_id = prsnl_id )
             and (ppr.active_ind = 1 )
             and ((ppr.person_id + 0 ) = person_id )
             and (ppr.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
             and (ppr.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
          join (cve
           where (cve.code_value = ppr.person_prsnl_r_cd )
             and (cve.code_set = 331 )
             and (((cve.field_value = "1" ) ) or ((cve.field_value = "2" ) ))
             and (cve.field_name = "Override" ) )
        detail
            override_ind = 1
        with nocounter
        ;end select
 
        return (override_ind )
    end ;subroutine
 
    subroutine  getpreferences (null )
        declare powerchart_app_number = i4 with protect ,constant (600005 )
        declare spreferencename = vc with protect ,constant ("PREGNANCY_SMART_TMPLT_ORG_SEC" )
        declare prefvalue = vc with noconstant ("0" ) ,protect
        select into "nl:"
          from (app_prefs ap ),
           (name_value_prefs nvp )
          plan (ap
           where (ap.prsnl_id = 0.0 )
             and (ap.position_cd = 0.0 )
             and (ap.application_number = powerchart_app_number ) )
          join (nvp
           where (nvp.parent_entity_name = "APP_PREFS" )
             and (nvp.parent_entity_id = ap.app_prefs_id )
             and (trim (nvp.pvc_name ,3 ) = cnvtupper (spreferencename ) ) )
        detail
           prefvalue = nvp.pvc_value
        with nocounter
        ;end select
 
        return (cnvtint (prefvalue ) )
    end ;subroutine
 
    subroutine  getorgsecurity (null )
        select into "nl:"
          from (dm_info d1 )
         where (d1.info_domain = "SECURITY" )
           and (d1.info_name = "SEC_ORG_RELTN" )
           and (d1.info_number = 1 )
        detail
            preg_org_sec_ind = 1
        with nocounter
        ;end select
 
        call echo (build ("org_sec_ind=" ,preg_org_sec_ind ) )
        if ((preg_org_sec_ind = 1 ) )
            call loadorganizationsecuritylist (null )
        endif
    end ;subroutine
 
    subroutine  loadorganizationsecuritylist (null )
        declare org_cnt = i2 with noconstant (0 )
        declare stat = i2 with protect ,noconstant (0 )
        if ((validate (sac_org ) = 1 ) )
            free record sac_org
        endif
 
        record sac_org (
            1 organizations [* ]
                2 organization_id = f8
                2 confid_cd = f8
                2 confid_level = i4
        )
 
        execute secrtl
        declare orgcnt              = i4 with protected ,noconstant (0 )
        declare secstat             = i2
        declare logontype           = i4 with protect   ,noconstant (- (1 ) )
        declare confid_cd           = f8 with protected ,noconstant (0.0 )
        declare role_profile_org_id = f8 with protected ,noconstant (0.0 )
 
        call uar_secgetclientlogontype (logontype )
        call echo (build ("logontype:" ,logontype ) )
 
        if ((logontype = 0 ) )
            select distinct into "nl:"
              from (prsnl_org_reltn por ),
               (organization o ),
               (prsnl p )
            plan (p
             where (p.person_id = reqinfo->updt_id ) )
            join (por
             where (por.person_id = p.person_id )
               and (por.active_ind = 1 )
               and (por.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
               and (por.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
            join (o
             where (por.organization_id = o.organization_id ) )
            detail
                orgcnt = (orgcnt + 1 ) ,
                if ((mod (orgcnt ,10 ) = 1 ) )
                    secstat = alterlist (sac_org->organizations ,(orgcnt + 9 ) )
                endif
 
                ,sac_org->organizations[orgcnt ].organization_id = por.organization_id ,
                 sac_org->organizations[orgcnt ].confid_cd       = por.confid_level_cd ,
                 confid_cd                                       = uar_get_collation_seq (por.confid_level_cd ) ,
                sac_org->organizations[orgcnt ].confid_level =
                    if ((confid_cd > 0 ) ) confid_cd
                    else 0
                    endif
            with nocounter
            ;end select
 
            set secstat = alterlist (sac_org->organizations ,orgcnt )
        endif
 
        if ((logontype = 1 ) )
            call echo ("entered into NHS logon" )
            declare hprop                          = i4 with protect ,noconstant (0 )
            declare tmpstat                        = i2
            declare spropname                      = vc
            declare sroleprofile                   = vc
            set hprop                              = uar_srvcreateproperty ()
            set tmpstat                            = uar_secgetclientattributesext (5 ,hprop )
            set spropname                          = uar_srvfirstproperty (hprop )
            set sroleprofile                       = uar_srvgetpropertyptr (hprop ,nullterm (spropname ) )
 
            call echo (sroleprofile )
            declare nhstrustchild_org_org_reltn_cd = f8
            set nhstrustchild_org_org_reltn_cd     = uar_get_code_by ("MEANING" ,369 ,"NHSTRUSTCHLD" )
            select into "nl:"
              from (prsnl_org_reltn_type prt ),
                   (prsnl_org_reltn por ),
                   (organization o )
              plan (prt
               where (prt.role_profile = sroleprofile )
                 and (prt.active_ind = 1 )
                 and (prt.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
                 and (prt.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
              join (o
               where (o.organization_id = prt.organization_id ) )
              join (por
               where (outerjoin (prt.organization_id ) = por.organization_id )
                 and (por.person_id = outerjoin (prt.prsnl_id ) )
                 and (por.active_ind = outerjoin (1 ) )
                 and (por.beg_effective_dt_tm <= outerjoin (cnvtdatetime (curdate ,curtime3 ) ) )
                 and (por.end_effective_dt_tm > outerjoin (cnvtdatetime (curdate ,curtime3 ) ) ) )
            order by por.prsnl_org_reltn_id
            detail
                orgcnt                                     = 1 ,
                stat                                       = alterlist (sac_org->organizations ,1 ) ,
                sac_org->organizations[1 ].organization_id = prt.organization_id ,
                role_profile_org_id                        = sac_org->organizations[orgcnt ].organization_id ,
                sac_org->organizations[1 ].confid_cd       = por.confid_level_cd ,
                confid_cd                                  = uar_get_collation_seq (por.confid_level_cd ) ,
                sac_org->organizations[1 ].confid_level    =
                    if ((confid_cd > 0 ) ) confid_cd
                    else 0
                    endif
            with maxrec = 1
            ;end select
            select into "nl:"
              from (prsnl_org_reltn por )
              plan (por
               where (por.person_id = reqinfo->updt_id )
                 and (por.active_ind = 1 )
                 and (por.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
                 and (por.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
            head report
                if ((orgcnt > 0 ) )
                    stat = alterlist (sac_org->organizations ,10 )
                endif
            detail
                if ((role_profile_org_id != por.organization_id ) )
                    orgcnt = (orgcnt + 1 ) ,
                    if ((mod (orgcnt ,10 ) = 1 ) )
                        stat = alterlist (sac_org->organizations ,(orgcnt + 9 ) )
                    endif
                    ,sac_org->organizations[orgcnt ].organization_id = por.organization_id
                    ,sac_org->organizations[orgcnt ].confid_cd = por.confid_level_cd
                    ,confid_cd = uar_get_collation_seq (por.confid_level_cd )
                    ,sac_org->organizations[orgcnt ].confid_level =
                        if ((confid_cd > 0 ) ) confid_cd
                        else 0
                        endif
                endif
            foot report
                stat = alterlist (sac_org->organizations ,orgcnt )
            with nocounter
            ;end select
 
            call uar_srvdestroyhandle (hprop )
        endif
 
        set org_cnt = size (sac_org->organizations ,5 )
        call echo (build ("org_cnt: " ,org_cnt ) )
        set stat = alterlist (preg_sec_orgs->qual ,(org_cnt + 1 ) )
        for (count = 1 to org_cnt )
            set preg_sec_orgs->qual[count ].org_id = sac_org->organizations[count ].organization_id
            set preg_sec_orgs->qual[count ].confid_level = sac_org->organizations[count ].confid_level
        endfor
        set preg_sec_orgs->qual[(org_cnt + 1 ) ].org_id = 0.00
        set preg_sec_orgs->qual[(org_cnt + 1 ) ].confid_level = 0
        call echorecord (preg_sec_orgs )
    end ;subroutine
 
    if ((validate (debug_ind ,0 ) = 1 ) )
        call echo (build ("stand_alone_ind:" ,stand_alone_ind ) )
    endif
 
    free set g_info
    record g_info (
        1 gravida = vc
        1 para_details = vc
        1 para_full_term = vc
        1 para_premature = vc
        1 para_abortions = vc
        1 para = vc
        1 mod_ind = vc
    )
    free set preghist
    record preghist (
        1 preg_cnt                       = i4
        1 preg[*]
            2 label                      = vc
            2 sensitive_ind              = i4
            2 child_cnt                  = i4
            2 child[*]
                3 dlv_date               = c10
                3 gest_at_birth          = c21
                3 child_gender           = vc
                3 length_labor           = vc
                3 infant_wt              = vc
                3 neonate_outcome        = vc
                3 preg_outcome           = vc
                3 dlv_hosp               = vc
                3 child_name             = vc
                3 father_name            = vc
                3 preterm_labor          = vc
                3 preterm_labor_ind      = i4
                3 preterm_labor_wrap[*]
                    4 wrap_text          = vc
                3 anesth_type            = vc
                3 anesth_type_ind        = i4
                3 anesth_type_wrap[*]
                    4 wrap_text          = vc
                3 fetal_complic          = vc
                3 fetal_complic_ind      = i4
                3 fetal_comp_wrap[*]
                    4 wrap_text          = vc
                3 neonate_complic        = vc
                3 neonate_complic_ind    = i4
                3 neonate_comp_wrap[*]
                    4 wrap_text          = vc
                3 maternal_complic       = vc
                3 maternal_complic_ind   = i4
                3 maternal_comp_wrap[*]
                    4 wrap_text          = vc
                3 preg_comments          = vc
                3 child_comment_id       = f8
                3 comment_wrapped[*]
                    4 wrap_text          = vc
    )
    declare auth                  = f8 with public,    constant(uar_get_code_by ("MEANING" ,8 ,"AUTH"       ))
    declare altered               = f8 with public,    constant(uar_get_code_by ("MEANING" ,8 ,"ALTERED"    ))
    declare modified              = f8 with public,    constant(uar_get_code_by ("MEANING" ,8 ,"MODIFIED"   ))
    declare gravida               = f8 with public,    constant(uar_get_code_by_cki("CKI.EC!6299"           ))
    declare para_details          = f8 with public,    constant(uar_get_code_by_cki("CKI.EC!6300"           ))
    declare para_full_term        = f8 with public,    constant(uar_get_code_by_cki("CKI.EC!10099"          ))
    declare para_premature        = f8 with public,    constant(uar_get_code_by_cki("CKI.EC!10100"          ))
    declare para_abortions        = f8 with public,    constant(uar_get_code_by_cki("CKI.EC!10101"          ))
    declare para_living           = f8 with public,    constant(uar_get_code_by_cki("CKI.EC!10024"          ))
    declare lb_cd                 = f8 with public,    constant(uar_get_code_by_cki("CKI.CODEVALUE!2746"    ))
    declare kg_cd                 = f8 with public,    constant(uar_get_code_by_cki("CKI.CODEVALUE!2751"    ))
    declare gm_cd                 = f8 with public,    constant(uar_get_code_by_cki("CKI.CODEVALUE!6123"    ))
    declare fetus_comp            = f8 with public,    constant(uar_get_code_by_cki("CKI.CODEVALUE!12805960"))
    declare mother_comp           = f8 with public,    constant(uar_get_code_by_cki("CKI.CODEVALUE!12805954"))
    declare newborn_comp          = f8 with public,    constant(uar_get_code_by_cki("CKI.CODEVALUE!12805961"))
    declare anesth_comp           = f8 with public,    constant(uar_get_code_by_cki("CKI.CODEVALUE!12610546"))
    declare preterm_comp          = f8 with public,    constant(uar_get_code_by_cki("CKI.CODEVALUE!12610547"))
    declare nodatacaption         = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap1" ,
                                                                    "No previous pregnancies history have been recorded"))
    declare preghistorycaption    = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap2" , "Pregnancy History"      ))
    declare outcomecaption        = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap3" , "Outcome Date:"          ))
    declare gestagecaption        = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap4" , "Gest Age:"              ))
    declare lenlaborcaption       = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap5" , "Len Labor:"             ))
    declare gendercaption         = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap6" , "Gender:"                ))
    declare wtabbrvcaption        = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap7" , "Wt:"                    ))
    declare pregnumcaption        = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap8" , "Pregnancy #"            ))
    declare neonateoutcomecaption = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap9" , "Neonate Outcome:"       ))
    declare pregoutcomecaption    = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap10", "Outcome or Result:"     ))
    declare anesthesiacaption     = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap11", "Anesthesia Type:"       ))
    declare deliveryhospcaption   = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap12", "Hospital:"              ))
    declare childsnamecaption     = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap13", "Child's Name:"          ))
    declare nameoffathercaption   = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap14", "Baby's Father:"         ))
    declare fetalcompcaption      = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap15", "Fetal Complications:"   ))
    declare neonatecompcaption    = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap16", "Neonate Complications:" ))
    declare maternalcompcaption   = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap17", "Maternal Complications:"))
    declare pretermlaborcaption   = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap18", "Preterm Labor:"         ))
    declare commentcaption        = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap19", "Comment:"               ))
    declare wkcaption             = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap20", " weeks"                 ))
    declare dcaption              = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap21", " days"                  ))
    declare hrcaption             = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap22", " hr"                    ))
    declare mincaption            = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap23", " min"                   ))
    declare gcaption              = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap24", " g"                     ))
    declare gmscaption            = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap25", " gms"                   ))
    declare multfetusbirthcaption = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap26",
                                                                    "*denotes multiple baby birth" ))
    declare sensitivecaption      = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap27",
                                                                    "      **Marked as Sensitive**"))
    declare babycaption           = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap28", "        Baby"           ))
    declare modifiedcaption       = vc with protect, noconstant(uar_i18ngetmessage(i18nhandle, "cap29", " (c)"                   ))
    declare mother_comp_text      = vc
    declare anesth_comp_text      = vc
    declare neonate_comp_text     = vc
    declare fetal_comp_text       = vc
    declare preterm_labor_text    = vc
 
    set para_gravida_located   = 0
    set g_info->gravida        = "0"
    set g_info->para_details   = "0"
    set g_info->para_full_term = "0"
    set g_info->para_premature = "0"
    set g_info->para_abortions = "0"
    set g_info->para           = "0"
    set g_info->mod_ind        = " "
 
    select into "nl:"
      from (clinical_event ce )
      plan (ce
       where (ce.person_id = request->person[1 ].person_id )
         and (ce.event_cd in (gravida ,
                              para_details ,
                              para_full_term ,
                              para_premature ,
                              para_abortions ,
                              para_living ) )
         and (ce.result_status_cd in (auth ,
                                      altered ,
                                      modified ) )
         and (ce.event_tag != "Date\Time Correction" )
         and (ce.valid_until_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
    order by ce.event_cd ,
             ce.event_end_dt_tm desc
    head report
        g_info->gravida = "0" ,
        g_info->para_details = "0" ,
        g_info->para_full_term = "0" ,
        g_info->para_premature = "0" ,
        g_info->para_abortions = "0" ,
        g_info->para = "0" ,
        g_info->mod_ind = " "
    head ce.event_cd
        g_info->mod_ind = " " ,
        case (ce.event_cd )
        of gravida :
            g_info->gravida = trim (ce.result_val ) ,
            if ((ce.result_status_cd = modified ) )
               g_info->mod_ind = modifiedcaption
            endif
        of para_details :
            g_info->para_details = trim (ce.result_val ) ,
            if ((ce.result_status_cd = modified ) )
                g_info->mod_ind = modifiedcaption
            endif
        of para_full_term :
            g_info->para_full_term = trim (ce.result_val ) ,
            if ((ce.result_status_cd = modified ) )
                g_info->mod_ind = modifiedcaption
            endif
        of para_premature :
            g_info->para_premature = trim (ce.result_val ) ,
            if ((ce.result_status_cd = modified ) )
                g_info->mod_ind = modifiedcaption
            endif
        of para_abortions :
            g_info->para_abortions = trim (ce.result_val ) ,
            if ((ce.result_status_cd = modified ) )
                g_info->mod_ind = modifiedcaption
            endif
        of para_living :
            g_info->para = trim (ce.result_val ) ,
            if ((ce.result_status_cd = modified ) )
                g_info->mod_ind = modifiedcaption
            endif
        endcase
    with nocounter
    ;end select
 
    select into "nl:"
        dlv_date = format (pc.delivery_dt_tm ,"mm/dd/yyyy;;d" ) ,
        gest_at_birth =
            if ((pc.gestation_age > 0 ) )
                if ((mod (pc.gestation_age ,7 ) = 0 ) )
                    build ((pc.gestation_age / 7 ) ,wkcaption )
                else
                    concat(trim(cnvtstring((pc.gestation_age / 7)))
                          ,wkcaption ," "
                          ,trim(cnvtstring(mod(pc.gestation_age ,7))),dcaption)
                endif
            elseif ((pc.gestation_term_txt > " " ) )
                substring (1 ,13 ,pc.gestation_term_txt )
            else
                snot_documented
            endif
        ,gender =
            if ((pc.gender_cd > 0 ) )
                substring (1 ,13 ,uar_get_code_display (pc.gender_cd ) )
            else
                snot_documented
            endif
        ,lol =
            if ((pc.labor_duration > 0 ) )
                if ((mod (pc.labor_duration ,60 ) = 0 ) )
                    build ((pc.labor_duration / 60 ) ,hrcaption )
                else
                    concat (trim (cnvtstring ((pc.labor_duration / 60 ) ) )
                           ,hrcaption ," " ,
                           trim (cnvtstring (mod (pc.labor_duration ,60 ) ) )
                           ,mincaption )
                endif
            else
                snot_documented
            endif
        ,wt =
            if ((pc.weight_amt > 0 ) )
                if ((pc.weight_unit_cd = lb_cd ) )
                    concat (format ((1000 * (pc.weight_amt / 2.2046 ) ) ,"#####" )
                           ,gcaption )
                elseif ((pc.weight_unit_cd = kg_cd ) )
                        concat (format ((1000 * pc.weight_amt ) ,"#####" ) , gcaption )
                elseif ((pc.weight_unit_cd = gm_cd ) )
                        concat (format (pc.weight_amt ,"#####" ) ,gcaption )
                endif
            else
                snot_documented
            endif
        ,neo_out =
            if ((pc.neonate_outcome_cd > 0 ) )
                substring (1 ,15 ,uar_get_code_display (pc.neonate_outcome_cd ))
            else
                snot_documented
            endif
        ,preg_out =
            if ((pc.delivery_method_cd > 0 ) )
                uar_get_code_display (pc.delivery_method_cd )
            else
                snot_documented
            endif
        ,compl = uar_get_code_display (pr.parent_entity_id )
        ,delivery_hospital =
            if ((pc.delivery_hospital > " " ) )
                substring (1 ,30 ,pc.delivery_hospital )
            else
                snot_documented
            endif
        ,child_name =
            if ((pc.child_name > " " ) )
                substring (1 ,30 ,pc.child_name )
            else
                snot_documented
            endif
        ,father_name =
            if ((pc.father_name > " " ) )
                substring (1 ,30 ,pc.father_name )
            else
                snot_documented
            endif
        ,preg_comments = trim (lt.long_text )
        ,anesthesia = trim (pc.anesthesia_txt )
        ,preterm_labor = trim (pc.preterm_labor_txt )
    from (pregnancy_instance pi ),
         (pregnancy_child pc ),
         (pregnancy_child_entity_r pr ),
         (long_text lt ),
         (code_value cv ),
         (nomenclature n ),
         (long_text lt2 )
    plan (pi
     where (pi.person_id = request->person[1 ].person_id )
       and (pi.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
       and (pi.active_ind = 1 ) )
    join (pc
     where (pc.pregnancy_id = pi.pregnancy_id )
       and (pc.active_ind = 1 )
       and (pc.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
    join (pr
     where (pr.pregnancy_child_id = outerjoin (pc.pregnancy_child_id ) )
       and (pr.active_ind = outerjoin (1 ) ) )
    join (cv
     where (cv.code_value = outerjoin (pr.parent_entity_id ) ) )
    join (n
     where (n.nomenclature_id = outerjoin (pr.parent_entity_id ) ) )
    join (lt
     where (lt.parent_entity_id = outerjoin (pc.pregnancy_child_id ) )
       and (lt.parent_entity_name = outerjoin ("PREGNANCY_CHILD" ) )
       and (lt.active_ind = outerjoin (1 ) ) )
    join (lt2
     where (lt2.long_text_id = outerjoin (pr.parent_entity_id ) ) )
    order by pc.delivery_dt_tm ,
             pc.pregnancy_child_id ,
             pr.component_type_cd ,
             n.source_string ,
             cv.display ,
             pr.updt_dt_tm
    head report
        preg_cnt = 0 ,
        child_cnt = 0
    head pi.pregnancy_instance_id
        preg_cnt = (preg_cnt + 1 ) ,child_cnt = 0
        ,stat = alterlist (preghist->preg ,preg_cnt )
        ,
        if ((pi.sensitive_ind = 1 ) )
            preghist->preg[preg_cnt ].sensitive_ind = 1
        endif
    head pc.pregnancy_child_id
        child_cnt = (child_cnt + 1 )
        ,stat = alterlist (preghist->preg[preg_cnt ].child ,child_cnt ) ,
 
        case (pc.delivery_date_precision_flag )
        of 0 : preghist->preg[preg_cnt ].child[child_cnt ].dlv_date = format (pc.delivery_dt_tm ,"@SHORTDATE4YR" )
        of 1 : preghist->preg[preg_cnt ].child[child_cnt ].dlv_date = format (pc.delivery_dt_tm ,"MM/YYYY;;d")
        of 2 : preghist->preg[preg_cnt ].child[child_cnt ].dlv_date = format (pc.delivery_dt_tm ,"YYYY;;d" )
        of 3 : preghist->preg[preg_cnt ].child[child_cnt ].dlv_date = format (pc.delivery_dt_tm ,"YYYY;;d" )
        endcase
 
        ,preghist->preg[preg_cnt ].child[child_cnt ].gest_at_birth = gest_at_birth
        ,preghist->preg[preg_cnt ].child[child_cnt ].child_gender = gender
        ,preghist->preg[preg_cnt ].child[child_cnt ].length_labor = lol
        ,preghist->preg[preg_cnt ].child[child_cnt ].infant_wt = trim (wt )
        ,preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor = pc.preterm_labor_txt
        ,preghist->preg[preg_cnt ].child[child_cnt ].neonate_outcome = neo_out
        ,preghist->preg[preg_cnt ].child[child_cnt ].preg_outcome = preg_out
        ,preghist->preg[preg_cnt ].child[child_cnt ].anesth_type = pc.anesthesia_txt
        ,preghist->preg[preg_cnt ].child[child_cnt ].dlv_hosp = delivery_hospital
        ,preghist->preg[preg_cnt ].child[child_cnt ].child_name = child_name
        ,preghist->preg[preg_cnt ].child[child_cnt ].father_name = father_name
        ,preghist->preg[preg_cnt ].child[child_cnt ].preg_comments = preg_comments
        ,preghist->preg[preg_cnt ].child[child_cnt ].child_comment_id = pc.child_comment_id
        ,mother_comp_text = " "
        ,anesth_comp_text = " "
        ,neonate_comp_text = " "
        ,fetal_comp_text = " "
        ,preterm_labor_text = " "
        ,mother_comp_cnt = 0
        ,anesth_comp_cnt = 0
        ,neonate_comp_cnt = 0
        ,fetal_comp_cnt = 0
        ,preterm_labor_cnt = 0
        ,preghist->preg[preg_cnt ].child[child_cnt ].maternal_complic_ind = 0
        ,preghist->preg[preg_cnt ].child[child_cnt ].anesth_type_ind = 0
        ,preghist->preg[preg_cnt ].child[child_cnt ].neonate_complic_ind = 0
        ,preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor_ind = 0
        ,preghist->preg[preg_cnt ].child[child_cnt ].fetal_complic_ind = 0 ,
 
        if ((pc.anesthesia_txt > " " ) )
            anesth_comp_text = trim (build (anesth_comp_text ,";" ,pc.anesthesia_txt ) )
            ,preghist->preg[preg_cnt ].child[child_cnt ].anesth_type_ind = 1
        endif,
 
        if ((pc.preterm_labor_txt > " " ) )
            preterm_labor_text = trim (build (preterm_labor_text ,";" ,pc .preterm_labor_txt ) )
           ,preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor_ind = 1
        endif
 
    detail
        case (pr.component_type_cd )
            of fetus_comp :
                fetal_comp_cnt = (fetal_comp_cnt + 1 ) ,
                if ((preghist->preg[preg_cnt ].child[child_cnt ].fetal_complic_ind = 0 ) )
                    preghist->preg[preg_cnt ].child[child_cnt ].fetal_complic_ind = 1
                endif,
 
                if ((pr.parent_entity_name = "NOMENCLATURE" ) )
                    fetal_comp_text = trim (build (fetal_comp_text ,";" ,n.source_string ) )
                elseif ((pr.parent_entity_name = "LONG_TEXT" ) )
                    fetal_comp_text = trim (build (fetal_comp_text,";" ,lt2.long_text ) )
                elseif ((pr.parent_entity_name = "CODE_VALUE" ) )
                    fetal_comp_text = trim (build (fetal_comp_text ,";" ,cv.display ) )
                endif
            of mother_comp :
                mother_comp_cnt = (mother_comp_cnt + 1 ) ,
                if ((preghist->preg[preg_cnt ].child[child_cnt ].maternal_complic_ind = 0 ) )
                    preghist->preg[preg_cnt ].child[child_cnt ].maternal_complic_ind = 1
                endif,
                if ((pr.parent_entity_name = "NOMENCLATURE" ) )
                    mother_comp_text = trim (build (mother_comp_text ,";" ,n.source_string ) )
                elseif ((pr.parent_entity_name = "LONG_TEXT" ) )
                    mother_comp_text = trim (build (mother_comp_text ,";" ,lt2.long_text ) )
                elseif ((pr.parent_entity_name = "CODE_VALUE" ) )
                    mother_comp_text = trim (build (mother_comp_text ,";" ,cv.display ) )
                 endif
            of newborn_comp :
                neonate_comp_cnt = (neonate_comp_cnt + 1 ) ,
                if ((preghist->preg[preg_cnt ].child[child_cnt ].neonate_complic_ind = 0 ) )
                    preghist->preg[preg_cnt ].child[child_cnt ].neonate_complic_ind = 1
                endif,
                if ((pr.parent_entity_name = "NOMENCLATURE" ) )
                    neonate_comp_text = trim (build (neonate_comp_text ,";" ,n.source_string ) )
                elseif ((pr.parent_entity_name = "LONG_TEXT" ) )
                    neonate_comp_text = trim (build (neonate_comp_text ,";" ,lt2.long_text ) )
                elseif ((pr.parent_entity_name = "CODE_VALUE" ) )
                    neonate_comp_text = trim (build (neonate_comp_text ,";" ,cv.display ) )
                endif
            of anesth_comp :
                anesth_comp_cnt = (anesth_comp_cnt + 1 ) ,
 
                if ((preghist->preg[preg_cnt ].child[child_cnt ].anesth_type_ind = 0 ) )
                    preghist->preg[preg_cnt ].child[child_cnt ].anesth_type_ind = 1
                endif,
 
                if ((pr.parent_entity_name = "NOMENCLATURE" ) )
                    anesth_comp_text = trim (build (anesth_comp_text ,";" ,n.source_string ) )
                elseif ((pr.parent_entity_name = "LONG_TEXT" ) )
                    anesth_comp_text = trim (build (anesth_comp_text ,";" ,lt2.long_text ) )
                elseif ((pr.parent_entity_name = "CODE_VALUE" ) )
                    anesth_comp_text = trim (build (anesth_comp_text ,";" ,cv.display ) )
                endif
            of preterm_comp :
                preterm_labor_cnt = (preterm_labor_cnt + 1 ) ,
                if ((preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor_ind = 0 ) )
                    preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor_ind = 1
                endif,
                if ((pr.parent_entity_name = "NOMENCLATURE" ) )
                    preterm_labor_text = trim (build (preterm_labor_text ,";" ,n.source_string ) )
                elseif ((pr.parent_entity_name = "LONG_TEXT" ) )
                    preterm_labor_text = trim (build (preterm_labor_text ,";" ,lt2.long_text ) )
                elseif ((pr.parent_entity_name = "CODE_VALUE" ) )
                    preterm_labor_text = trim (build (preterm_labor_text ,";" ,cv.display ) )
                endif
            endcase
    foot  pc.pregnancy_child_id
        preghist->preg[preg_cnt ].child_cnt = child_cnt ,
        if ((preghist->preg[preg_cnt ].child[child_cnt ].fetal_complic_ind = 1 ) )
            preghist->preg[preg_cnt].child[child_cnt].fetal_complic = fetal_comp_text ,
            preghist->preg[preg_cnt].child[child_cnt].fetal_complic =
                                           trim(replace(preghist->preg[preg_cnt].child[child_cnt].fetal_complic ,";" ,"" ,1 ) ,3 ) ,
            preghist->preg[preg_cnt].child[child_cnt].fetal_complic =
                                           replace(preghist->preg[preg_cnt].child[child_cnt].fetal_complic ,";" ,"; " )
        endif,
        if ((preghist->preg[preg_cnt ].child[child_cnt ].maternal_complic_ind = 1 ) )
            preghist->preg[preg_cnt].child[child_cnt].maternal_complic = mother_comp_text ,
            preghist->preg[preg_cnt].child[child_cnt].maternal_complic =
                                        trim(replace(preghist->preg[preg_cnt].child[child_cnt].maternal_complic ,";" ,"" ,1 ) ,3 ) ,
            preghist->preg[preg_cnt].child[child_cnt].maternal_complic =
                                        replace (preghist->preg[preg_cnt ].child[child_cnt ].maternal_complic ,";" , "; " )
        endif,
        if ((preghist->preg[preg_cnt ].child[child_cnt ].neonate_complic_ind = 1 ) )
        preghist->preg[preg_cnt].child[child_cnt].neonate_complic = neonate_comp_text ,
        preghist->preg[preg_cnt].child[child_cnt].neonate_complic =
                                        trim(replace(preghist->preg[preg_cnt].child[child_cnt].neonate_complic ,";" ,"" ,1 ) ,3 ) ,
        preghist->preg[preg_cnt].child[child_cnt].neonate_complic =
                                        replace(preghist->preg[preg_cnt].child[child_cnt].neonate_complic ,";" ,"; " )
        endif,
        if ((preghist->preg[preg_cnt ].child[child_cnt ].anesth_type_ind = 1 ) )
            preghist->preg[preg_cnt ].child[child_cnt ].anesth_type = anesth_comp_text ,
            preghist->preg[preg_cnt ].child[child_cnt ].anesth_type =
                                        trim (replace (preghist->preg[preg_cnt ].child[child_cnt ].anesth_type ,";" ,"" ,1) ,3 ) ,
            preghist->preg[preg_cnt ].child[child_cnt ].anesth_type =
                                        replace (preghist->preg[preg_cnt ].child[child_cnt ].anesth_type ,";" ,"; " )
        endif,
        if ((preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor_ind = 1 ) )
            preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor = preterm_labor_text ,
            preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor =
                                        trim (replace (preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor ,";" ,"" ,1 ) ,3 ),
            preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor =
                                        replace (preghist->preg[preg_cnt ].child[child_cnt ].preterm_labor ,";" ,"; " )
        endif
    foot  pi.pregnancy_instance_id
        preghist->preg_cnt = preg_cnt
    with nocounter ,outerjoin = d1
    ;end select
 
    for (pcnt = 1 to preghist->preg_cnt )
        for (ccnt = 1 to preghist->preg[pcnt ].child_cnt )
            if ((preghist->preg[pcnt ].child[ccnt ].child_comment_id > 0 ) )
                free record pt
                record pt (
                  1 line_cnt = i2
                  1 lns [* ]
                    2 line = vc
                )
                set pt->line_cnt = 0
                set max_length = 90
                execute dcp_parse_text value (preghist->preg[pcnt ].child[ccnt ].preg_comments ) ,value (max_length )
                set stat = alterlist (preghist->preg[pcnt ].child[ccnt ].comment_wrapped ,pt->line_cnt )
                for (wrapcnt = 1 to pt->line_cnt )
                    set preghist->preg[pcnt ].child[ccnt ].comment_wrapped[wrapcnt ].wrap_text = pt->lns[wrapcnt ].line
                endfor
            endif
        endfor
    endfor
 
    for (pcnt = 1 to preghist->preg_cnt )
        for (ccnt = 1 to preghist->preg[pcnt ].child_cnt )
            if ((preghist->preg[pcnt ].child[ccnt ].maternal_complic_ind = 1 ) )
                free record pt
                record pt (
                  1 line_cnt = i2
                  1 lns [* ]
                    2 line = vc
                )
                set pt->line_cnt = 0
                set max_length = 90
                execute dcp_parse_text value (preghist->preg[pcnt ].child[ccnt ].maternal_complic ) ,value (max_length )
                set stat = alterlist (preghist->preg[pcnt ].child[ccnt ].maternal_comp_wrap ,pt->line_cnt )
                for (wrapcnt = 1 to pt->line_cnt )
                    set preghist->preg[pcnt ].child[ccnt ].maternal_comp_wrap[wrapcnt ].wrap_text = pt->lns[wrapcnt].line
                endfor
            endif
        endfor
    endfor
 
    for (pcnt = 1 to preghist->preg_cnt )
        for (ccnt = 1 to preghist->preg[pcnt ].child_cnt )
            if ((preghist->preg[pcnt ].child[ccnt ].anesth_type_ind = 1 ) )
                free record pt
                record pt (
                  1 line_cnt = i2
                  1 lns [* ]
                    2 line = vc
                )
                set pt->line_cnt = 0
                set max_length = 90
                execute dcp_parse_text value (preghist->preg[pcnt ].child[ccnt ].anesth_type ) ,value (max_length )
                set stat = alterlist (preghist->preg[pcnt ].child[ccnt ].anesth_type_wrap ,pt->line_cnt )
                for (wrapcnt = 1 to pt->line_cnt )
                    set preghist->preg[pcnt ].child[ccnt ].anesth_type_wrap[wrapcnt ].wrap_text = pt->lns[wrapcnt ].line
                endfor
            endif
        endfor
    endfor
 
    for (pcnt = 1 to preghist->preg_cnt )
        for (ccnt = 1 to preghist->preg[pcnt ].child_cnt )
            if ((preghist->preg[pcnt ].child[ccnt ].fetal_complic_ind = 1 ) )
                free record pt
                record pt (
                  1 line_cnt = i2
                  1 lns [* ]
                    2 line = vc
                )
                set pt->line_cnt = 0
                set max_length = 90
                execute dcp_parse_text value (preghist->preg[pcnt ].child[ccnt ].fetal_complic ) ,value (max_length )
                set stat = alterlist (preghist->preg[pcnt ].child[ccnt ].fetal_comp_wrap ,pt->line_cnt )
                for (wrapcnt = 1 to pt->line_cnt )
                    set preghist->preg[pcnt ].child[ccnt ].fetal_comp_wrap[wrapcnt ].wrap_text = pt->lns[wrapcnt ].line
                endfor
            endif
        endfor
    endfor
 
    for (pcnt = 1 to preghist->preg_cnt )
        for (ccnt = 1 to preghist->preg[pcnt ].child_cnt )
            if ((preghist->preg[pcnt ].child[ccnt ].neonate_complic_ind = 1 ) )
                free record pt
                record pt (
                  1 line_cnt = i2
                  1 lns [* ]
                    2 line = vc
                )
                set pt->line_cnt = 0
                set max_length = 90
                execute dcp_parse_text value (preghist->preg[pcnt ].child[ccnt ].neonate_complic ) ,value (max_length )
                set stat = alterlist (preghist->preg[pcnt ].child[ccnt ].neonate_comp_wrap ,pt->line_cnt )
                for (wrapcnt = 1 to pt->line_cnt )
                    set preghist->preg[pcnt ].child[ccnt ].neonate_comp_wrap[wrapcnt ].wrap_text = pt->lns[wrapcnt ].line
                endfor
            endif
        endfor
    endfor
 
    for (pcnt = 1 to preghist->preg_cnt )
        for (ccnt = 1 to preghist->preg[pcnt ].child_cnt )
            if ((preghist->preg[pcnt ].child[ccnt ].preterm_labor_ind = 1 ) )
                free record pt
                record pt (
                  1 line_cnt = i2
                  1 lns [* ]
                    2 line = vc
                )
                set pt->line_cnt = 0
                set max_length = 90
                execute dcp_parse_text value (preghist->preg[pcnt ].child[ccnt ].preterm_labor ) ,value (max_length )
                set stat = alterlist (preghist->preg[pcnt ].child[ccnt ].preterm_labor_wrap ,pt->line_cnt )
                for (wrapcnt = 1 to pt->line_cnt )
                    set preghist->preg[pcnt ].child[ccnt ].preterm_labor_wrap[wrapcnt ].wrap_text = pt->lns[wrapcnt].line
                endfor
            endif
        endfor
    endfor
    if (validate (debug_ind ,0 ) )
        call echorecord (g_info )
        call echorecord (preghist )
    endif
 
 
    ;001 Making this conditional on data being present.
    if ((size (preghist->preg ,5 ) > 0 ) ) ;001
        if ((stand_alone_ind = 0 ) )
            set reply->text = concat (reply->text ,rsechead ,colornavy ,preghistorycaption ,wr )
        else
            set reply->text = concat (reply->text ,rhead ,rhead_colors1 ,rhead_colors2 ,rhead_colors3 )
            if ((validate (antepartum_run_ind ) = 1 ) )
                set reply->text = concat (reply->text ,rsechead ,colornavy ,preghistorycaption ,wr )
            endif
        endif
 
        set reply->text = concat (reply->text ,"    " ,wb18 ,"G" ,g_info->gravida ," P" ,g_info->para_details ,"(" ,
                                  g_info->para_full_term ,"," ,g_info->para_premature ,"," ,g_info->para_abortions,
                                  "," ,g_info->para ,")" ,wsd ,"     " ,colorgrey ,wr )
 
        ;001 This is impossible to get to with our change as intended.
        ;if ((size (preghist->preg ,5 ) < 1 ) )
        ;    set reply->text = concat (reply->text ,rpard ,rtabstopnd ,reol ,reol ,rtab ,wr ,nodatacaption )
        ;endif
    endif ;001
 
    for (p = 1 to size (preghist->preg ,5 ) )
        set preg_nbr = trim (cnvtstring (p ) )
        if ((p = 1 ) )
            set reply->text = concat (reply->text ,rpard ,"\tx1000\tx4400\tx6300" ,reol ,wb ,pregnumcaption ," " ,preg_nbr )
        else
            set reply->text = concat (reply->text ,rpard ,"\tx1000\tx4400\tx6300" ,reol ,reol ,wb , pregnumcaption ," " ,preg_nbr )
        endif
        if ((preghist->preg[p ].sensitive_ind = 1 ) )
            set reply->text = concat (reply->text ,wr ,colorred ,sensitivecaption ,wr )
        endif
 
        for (c = 1 to size (preghist->preg[p ].child ,5 ) )
            set baby_nbr = trim (cnvtstring (c ) )
            set reply->text = concat (reply->text ,reol ,wr ,babycaption ," " ,baby_nbr )
            ;002 This is the old way
            ;set reply->text = concat (reply->text ,wr ,rtab ,wr ,colorgrey ,outcomecaption ," " ,wr ,
            ;                         preghist->preg[p ].child[c ].dlv_date
            ;              ,rtab ,wr ,colorgrey ,neonateoutcomecaption ," ", wr ,preghist->preg[p ].child[c ].neonate_outcome ,reol
            ;              ,rtab ,wr ,colorgrey ,pregoutcomecaption ," " ,wr , preghist->preg[p ].child[c ].preg_outcome ,reol
            ;              ,rtab ,wr ,colorgrey ,gendercaption ," " ,wr ,preghist->preg[p ].child[c ].child_gender
            ;              ,rtab ,wr ,colorgrey ,gestagecaption ," " ,wr ,preghist->preg[p ].child[c ].gest_at_birth
            ;              ,rtab ,wr ,colorgrey ,wtabbrvcaption ," " ,wr ,preghist->preg[p ].child[c ].infant_wt ,reol
            ;              ,rtab ,wr ,colorgrey ,deliveryhospcaption ," " ,wr ,preghist->preg[p ].child[c ].dlv_hosp
            ;              ,rtab ,wr ,colorgrey ,lenlaborcaption ," " ,wr ,preghist->preg[p ].child[c ].length_labor ,reol
            ;              ,rtab ,wr ,colorgrey ,childsnamecaption ," " ,wr ,preghist->preg[p ].child[c ].child_name
            ;              ,rtab ,wr ,colorgrey ,nameoffathercaption ," " ,wr ,preghist->preg[p ].child[c ].father_name )
            ;002 now the new way
           
            set reply->text = concat (reply->text ,wr ,rtab ,wr ,colorgrey ,outcomecaption ," " 
                                                  ,wr , preghist->preg[p ].child[c ].dlv_date)
                                                  
            if(preghist->preg[p].child[c].neonate_outcome != snot_documented)     
                set reply->text = concat (reply->text ,rtab , wr ,colorgrey ,neonateoutcomecaption ," "
                                                            , wr ,preghist->preg[p].child[c].neonate_outcome ,reol)
            else
                set reply->text = concat (reply->text ,rtab , wr, reol)
            
            endif
            
            if(preghist->preg[p].child[c].preg_outcome != snot_documented)     
                set reply->text = concat (reply->text ,rtab ,wr ,colorgrey ,pregoutcomecaption    ," " 
                                                            ,wr ,preghist->preg[p].child[c].preg_outcome    ,reol)
            else
                set reply->text = concat (reply->text ,rtab , wr, reol)
            
            endif
            
            if(preghist->preg[p].child[c].child_gender != snot_documented)     
                set reply->text = concat (reply->text ,rtab ,wr ,colorgrey ,gendercaption         ," " 
                                                            ,wr ,preghist->preg[p].child[c].child_gender         )
            
            endif
            
            if(preghist->preg[p].child[c].gest_at_birth != snot_documented)     
                set reply->text = concat (reply->text ,rtab ,wr ,colorgrey ,gestagecaption        ," " 
                                                            ,wr ,preghist->preg[p].child[c].gest_at_birth        )
            
            endif
                                                  
            if(preghist->preg[p].child[c].infant_wt != snot_documented)     
                set reply->text = concat (reply->text ,rtab ,wr ,colorgrey ,wtabbrvcaption        ," " 
                                                            ,wr ,preghist->preg[p].child[c].infant_wt       ,reol)
            else
                set reply->text = concat (reply->text ,rtab , wr, reol)
            
            endif
            
            if(preghist->preg[p].child[c].dlv_hosp != snot_documented)     
                set reply->text = concat (reply->text ,rtab ,wr ,colorgrey ,deliveryhospcaption   ," " 
                                                            ,wr ,preghist->preg[p].child[c].dlv_hosp             )
                
            endif
                                                  
            if(preghist->preg[p].child[c].length_labor != snot_documented)     
                set reply->text = concat (reply->text ,rtab ,wr ,colorgrey ,lenlaborcaption       ," " 
                                                            ,wr ,preghist->preg[p].child[c].length_labor    ,reol)
            else
                set reply->text = concat (reply->text ,rtab , wr, reol)
            
            endif
            
            if(preghist->preg[p].child[c].child_name != snot_documented)     
                set reply->text = concat (reply->text ,rtab ,wr ,colorgrey ,childsnamecaption     ," " 
                                                            ,wr ,preghist->preg[p].child[c].child_name           )
                
            endif
            
            if(preghist->preg[p].child[c].father_name != snot_documented)     
                set reply->text = concat (reply->text ,rtab ,wr ,colorgrey ,nameoffathercaption   ," " 
                                                            ,wr ,preghist->preg[p].child[c].father_name          )
                
            endif
            
            
            ;002
            for (z = 1 to size (preghist->preg[p ].child[c ].anesth_type_wrap ,5 ) )
                if ((z = 1 ) )
                    set reply->text = concat (reply->text ,reol ,rtab ,wr ,colorgrey ,anesthesiacaption ," " ,wr ,
                    preghist->preg[p ].child[c ].anesth_type_wrap[z ].wrap_text )
                else
                    set reply->text = concat (reply->text ,reol ,rtab ,"                         " ,
                                                preghist->preg[p ].child[c ].anesth_type_wrap[z ].wrap_text )
                endif
            endfor
            for (z = 1 to size (preghist->preg[p ].child[c ].preterm_labor_wrap ,5 ) )
                if ((z = 1 ) )
                    set reply->text = concat (reply->text ,reol ,rtab ,wr ,colorgrey ,pretermlaborcaption ," " ,wr ,
                                                preghist->preg[p ].child[c ].preterm_labor_wrap[z ].wrap_text )
                else
                    set reply->text = concat (reply->text ,reol ,rtab ,"                         " ,
                                                preghist->preg[p ].child[c ].preterm_labor_wrap[z ].wrap_text )
                endif
            endfor
            for (z = 1 to size (preghist->preg[p ].child[c ].maternal_comp_wrap ,5 ) )
                if ((z = 1 ) )
                    set reply->text = concat (reply->text ,reol ,rtab ,wr ,colorgrey ,maternalcompcaption ," " ,wr ,
                                                preghist->preg[p ].child[c ].maternal_comp_wrap[z ].wrap_text )
                else
                    set reply->text = concat (reply->text ,reol ,rtab ,"                         " ,
                                            preghist->preg[p ].child[c ].maternal_comp_wrap[z ].wrap_text )
                endif
            endfor
            for (z = 1 to size (preghist->preg[p ].child[c ].fetal_comp_wrap ,5 ) )
                if ((z = 1 ) )
                    set reply->text = concat (reply->text ,reol ,rtab ,wr ,colorgrey ,fetalcompcaption ," " ,wr ,
                                            preghist->preg[p ].child[c ].fetal_comp_wrap[z ].wrap_text )
                else
                    set reply->text = concat (reply->text ,reol ,rtab ,"                         " ,
                    preghist->preg[p ].child[c ].fetal_comp_wrap[z ].wrap_text )
                endif
            endfor
            for (z = 1 to size (preghist->preg[p ].child[c ].neonate_comp_wrap ,5 ) )
                if ((z = 1 ) )
                    set reply->text = concat (reply->text ,reol ,rtab ,wr ,colorgrey ,neonatecompcaption ," " ,wr ,
                                                    preghist->preg[p ].child[c ].neonate_comp_wrap[z ].wrap_text )
                else
                    set reply->text = concat (reply->text ,reol ,rtab ,"                         " ,
                                                    preghist->preg[p ].child[c ].neonate_comp_wrap[z ].wrap_text )
                endif
            endfor
            for (z = 1 to size (preghist->preg[p ].child[c ].comment_wrapped ,5 ) )
                if ((z = 1 ) )
                    set reply->text = concat (reply->text ,reol ,rtab ,wr ,colorgrey ,commentcaption ," " ,wr ,
                                            preghist->preg[p ].child[c ].comment_wrapped[z ].wrap_text )
                else
                    set reply->text = concat (reply->text ,reol ,rtab ,"                         " ,
                                            preghist->preg[p ].child[c ].comment_wrapped[z ].wrap_text )
                endif
            endfor
        endfor
    endfor
 
    ;001 under old code we expected the head to be dropped here... rather than fighting that fight above
    ;    I'm going to just remove the RTF if we had no data.
    if ((size (preghist->preg ,5 ) < 1 ) )                   ;001
        set reply->text = concat(rhead, rtfeof)              ;001
    else                                                     ;001
        set reply->text = concat (reply->text ,reol ,rpard )
 
        ;001 moving the below from exit script into the if.
        if ((stand_alone_ind = 1 ) )
            set reply->text = concat (reply->text ,rtfeof )
        endif
    endif                                                    ;001
 
    #exit_script
 
 
    set script_version = "001"
end go
 